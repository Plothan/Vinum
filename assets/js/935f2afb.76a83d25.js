"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Vinum","href":"/Vinum/docs/intro","docId":"intro"},{"type":"category","label":"Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Holding State","href":"/Vinum/docs/Basics/Holding State","docId":"Basics/Holding State"},{"type":"link","label":"Observing State","href":"/Vinum/docs/Basics/Observing State","docId":"Basics/Observing State"},{"type":"link","label":"Calculating State","href":"/Vinum/docs/Basics/Calculating State","docId":"Basics/Calculating State"},{"type":"link","label":"Processors","href":"/Vinum/docs/Basics/Processors","docId":"Basics/Processors"}]},{"type":"category","label":"Intermediate","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Matching State","href":"/Vinum/docs/Intermediate/Matching State","docId":"Intermediate/Matching State"},{"type":"link","label":"Mirroring State","href":"/Vinum/docs/Intermediate/Mirroring State","docId":"Intermediate/Mirroring State"},{"type":"link","label":"Recording State","href":"/Vinum/docs/Intermediate/Recording State","docId":"Intermediate/Recording State"},{"type":"link","label":"Reflecting State","href":"/Vinum/docs/Intermediate/Reflecting State","docId":"Intermediate/Reflecting State"}]},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Wrapping State","href":"/Vinum/docs/Advanced/Wrapping State","docId":"Advanced/Wrapping State"},{"type":"link","label":"Grouping State","href":"/Vinum/docs/Advanced/Grouping State","docId":"Advanced/Grouping State"},{"type":"link","label":"Manual Memory Management","href":"/Vinum/docs/Advanced/Manual Memory Management","docId":"Advanced/Manual Memory Management"}]}]},"docs":{"Advanced/Grouping State":{"id":"Advanced/Grouping State","title":"Grouping State","description":"Centralizing your state is sometimes a necessary evil. Learn how Vinum helps you manage centralized state using Groups.","sidebar":"defaultSidebar"},"Advanced/Manual Memory Management":{"id":"Advanced/Manual Memory Management","title":"Manual Memory Management","description":"Memory management is something needed in general software programming, and it is no different when coding with Vinum.","sidebar":"defaultSidebar"},"Advanced/Wrapping State":{"id":"Advanced/Wrapping State","title":"Wrapping State","description":"Sometimes, we often want to \\"wrap\\" events in the form of state objects. Most notably to wrap a Humanoid\'s HealthChanged to have an updated health state object. Of course, such a need is always common in partially-managed vinum data model, so usually you wouldn\'t need to use this if you have a completely-managed vinum data model.","sidebar":"defaultSidebar"},"Basics/Calculating State":{"id":"Basics/Calculating State","title":"Calculating State","description":"In Vinum, there is a way to implement derived values at scale, which is Calcs. These are equiped with injector functions that allow you to explicitly define the dependencies that will be used.","sidebar":"defaultSidebar"},"Basics/Holding State":{"id":"Basics/Holding State","title":"Holding State","description":"In Vinum, one of the most basic tools that are provided is Hold- hence the name Holding State is chosen. They are useful for holding data, and allowing them to be used by other Vinum objects.","sidebar":"defaultSidebar"},"Basics/Observing State":{"id":"Basics/Observing State","title":"Observing State","description":"State observation is a fundemental tool that allows you to bind some functions that will run whenever an update is ran in an observed state object- that is Observe.","sidebar":"defaultSidebar"},"Basics/Processors":{"id":"Basics/Processors","title":"Processors","description":"Processors are the most essential part of Vinum, they give you control to change the control flow of updates to some extent.","sidebar":"defaultSidebar"},"Intermediate/Matching State":{"id":"Intermediate/Matching State","title":"Matching State","description":"Sometimes, you need to switch to certain computations depending on another object\'s value. The responsible object for this is Match. Additionally, they are also equiped with the same injectors that Calc is equiped with- so you can use the matches the same as calcs to an extent.","sidebar":"defaultSidebar"},"Intermediate/Mirroring State":{"id":"Intermediate/Mirroring State","title":"Mirroring State","description":"Sometimes, we want to directly return state object\'s value in all cases, and while Matches are a decent tool for that, Vinum offers a more specialized tool for that, which is Mirror.","sidebar":"defaultSidebar"},"Intermediate/Recording State":{"id":"Intermediate/Recording State","title":"Recording State","description":"Sometimes, we need to store \\"versions\\" of certian state objects for stuff like undo/redo changes for states- Vinum allows you to do this using Records.","sidebar":"defaultSidebar"},"Intermediate/Reflecting State":{"id":"Intermediate/Reflecting State","title":"Reflecting State","description":"Reflecting State is an another Vinum tool that allows you to create \\"readonly\\" copies of a specified state object. The object in question is Reflect.","sidebar":"defaultSidebar"},"intro":{"id":"intro","title":"Vinum","description":"Vinum is an incredibly fast reactive state management library that exposes a very declarative interface that allows you to build scalable state-dependent software on Roblox","sidebar":"defaultSidebar"}}}')}}]);