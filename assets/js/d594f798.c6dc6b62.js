"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9768],{78942:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"Hold","desc":"Hold\'s constructor.","lua_type":"() -> (Hold)","source":{"line":15,"path":"src/init.luau"}},{"name":"Observe","desc":"Observe\'s constructor.","lua_type":"() -> (Observe)","source":{"line":22,"path":"src/init.luau"}},{"name":"Calc","desc":"Calc\'s constructor.","lua_type":"() -> (Calc)","source":{"line":29,"path":"src/init.luau"}},{"name":"Match","desc":"Match\'s constructor.","lua_type":"() -> (Match)","source":{"line":36,"path":"src/init.luau"}},{"name":"Group","desc":"Group\'s constructor.","lua_type":"() -> (Group)","source":{"line":43,"path":"src/init.luau"}},{"name":"Mirror","desc":"Mirror\'s constructor.","lua_type":"() -> (Mirror)","source":{"line":50,"path":"src/init.luau"}},{"name":"Wrap","desc":"Wrap\'s constructor.","lua_type":"() -> (Wrap)","source":{"line":57,"path":"src/init.luau"}},{"name":"Reflect","desc":"Reflect\'s constructor.","lua_type":"() -> (Reflect)","source":{"line":64,"path":"src/init.luau"}},{"name":"Record","desc":"Record\'s constructor.","lua_type":"() -> (Record)","source":{"line":71,"path":"src/init.luau"}},{"name":"AlwaysTrue","desc":"A processor function that returns true every time it is called.","lua_type":"(oldValue: T, newVallue: T) -> (true)","source":{"line":79,"path":"src/init.luau"}},{"name":"RefuseIfSimilar","desc":"A processor function that returns true if the oldValue isn\'t equal to newValue","lua_type":"(oldValue: T, newVallue: T) -> (boolean)","source":{"line":89,"path":"src/init.luau"}},{"name":"RefuseIfSimilarAndCleanup","desc":"A processor function that returns true if the oldValue isn\'t equal to newValue- plus, it will perform cleanup.","lua_type":"(oldValue: T, newVallue: T) -> (boolean)","source":{"line":102,"path":"src/init.luau"}},{"name":"RefuseIfSimilarInGroups","desc":"Similar to `RefuseIfSimilar`, but modified to work with Groups.","lua_type":"(keyName: string, oldValue: T, newVallue: T) -> (boolean)","source":{"line":120,"path":"src/init.luau"}},{"name":"RefuseIfSimilarAndCleanupInGroup","desc":"Similar to `RefuseIfSimilarAndCleanup`, but modified to work with Groups.","lua_type":"(keyName: string, oldValue: T, newVallue: T) -> (boolean)","source":{"line":130,"path":"src/init.luau"}},{"name":"Version","desc":"The version that this build is based of.","lua_type":"{Major: number, Minor: number, Patch: number}","source":{"line":140,"path":"src/init.luau"}},{"name":"Destroy","desc":"Destroys the given state object.","lua_type":"(stateObj) -> ()","source":{"line":151,"path":"src/init.luau"}}],"types":[],"name":"Vinum","desc":"The interface to Vinum\'s tools.","source":{"line":8,"path":"src/init.luau"}}')}}]);