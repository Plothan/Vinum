"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8722],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,y=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(y,i(i({ref:t},p),{},{components:a})):n.createElement(y,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},66482:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:2},i="Grouping State",l={unversionedId:"Advanced/Grouping State",id:"Advanced/Grouping State",title:"Grouping State",description:"Centralizing your state is sometimes a necessary evil. Learn how Vinum helps you manage centralized state using Groups.",source:"@site/docs/Advanced/Grouping State.md",sourceDirName:"Advanced",slug:"/Advanced/Grouping State",permalink:"/Vinum/docs/Advanced/Grouping State",draft:!1,editUrl:"https://github.com/Plothan/Vinum/edit/master/docs/Advanced/Grouping State.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Wrapping State",permalink:"/Vinum/docs/Advanced/Wrapping State"},next:{title:"Manual Memory Management",permalink:"/Vinum/docs/Advanced/Manual Memory Management"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Why Centralization?",id:"why-centralization",level:2},{value:"Injectors: useKeyState",id:"injectors-usekeystate",level:2}],p={toc:u};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"grouping-state"},"Grouping State"),(0,r.kt)("p",null,"Centralizing your state is sometimes a necessary evil. Learn how Vinum helps you manage centralized state using ",(0,r.kt)("inlineCode",{parentName:"p"},"Groups"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use Groups, we first must import its constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local Group = Vinum.Group\n")),(0,r.kt)("p",null,"And now to create a Group, we pass a set processor that will be fired with the key name, and the old value, and the new value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local props = Group(function(key, oldvalue, newvalue)\n    return true\nend)\n")),(0,r.kt)("p",null,"And now to write to it, we fire its ",(0,r.kt)("inlineCode",{parentName:"p"},"setKey"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'props:setKey("yourKey", 123)\n')),(0,r.kt)("p",null,"And now, to read from it, we use its ",(0,r.kt)("inlineCode",{parentName:"p"},"getKey"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'print(props:getKey("yourKey")) -- 123\n')),(0,r.kt)("p",null,"Aside from basic reading/writing operations, we can ",(0,r.kt)("strong",{parentName:"p"},"also")," directly connect connections that will run once a change has been made:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"props:onChange(function(key, oldValue, newValue)\n    print(key, oldValue, newValue)\nend)\n")),(0,r.kt)("p",null,"And aside from all of that basic operations, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"we can also create self-contained copies of a group key!"))," To do this, we use its ",(0,r.kt)("inlineCode",{parentName:"p"},"asState")," method which we can read from using its ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," method as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local yourKey = props:asState("yourKey")\nprint(yourKey:get())\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"why-centralization"},"Why Centralization?"),(0,r.kt)("p",null,"State Centralization is a very respectable state management paradigm as it avoids state being duplicated in multiple DataModels."),(0,r.kt)("p",null,"Unlike Rodux- which follows State centralization very strictly, Vinum rather gives you the tools to manage centralized state, but doesn't mostly care about how you approach it."),(0,r.kt)("p",null,"Outside of this complex state management world, you have actually used state centralization in your games in a form of another - for example, using Roblox Attributes to centralize custom state about an object that is readable/writable by other pieces of code."),(0,r.kt)("p",null,"State centralization also means that we have a single source of truth for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"something")),", not necessarily the whole Application's state, but rather a part of it. SSOT is important as it guarantees that we don't have multiple places that have duplicated state, such as a players health - additionally, it is better for memory-wise as well."),(0,r.kt)("h2",{id:"injectors-usekeystate"},"Injectors: useKeyState"),(0,r.kt)("p",null,"In the Calc/Match docs, you saw a weird injector that goes by the name of useKeyState. This injector is simply a function that allows you to depend on specific keys within a group, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local CalcObj = Calc(function(_, useKeyState)\n    return useKeyState(groupHere, "anyKey")\nend, AlwaysTrue)\n')),(0,r.kt)("p",null,"This now will trigger an update whenever anyKey is changed."))}c.isMDXComponent=!0}}]);