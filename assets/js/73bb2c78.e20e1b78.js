"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[366],{65255:e=>{e.exports=JSON.parse('{"functions":[{"name":"get","desc":"Returns the current value from the cache\\n\\n```lua\\nlocal holdState = Hold(100, Vinum.AlwaysTrue)\\n\\nprint(holdState:get())\\n```","params":[],"returns":[{"desc":"The cached value","lua_type":"any"}],"function_type":"method","source":{"line":47,"path":"src/Hold.luau"}},{"name":"set","desc":"Sets the new value of this Hold object.\\n\\n```lua\\nlocal holdState = Hold(100, Vinum.AlwaysTrue)\\n\\nholdState:set(40)\\n```","params":[{"name":"newValue","desc":"The new value you want this object to contain","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":62,"path":"src/Hold.luau"}}],"properties":[],"types":[],"name":"Hold","desc":"```lua\\nfunction Hold<T>(\\n\\tinitialValue: T, -- The value that will be stored initially.\\n\\tupdateProcessor: ( -- The function that will be used to determine whether to pass updates or not.\\n\\t\\toldValue, \\n\\t\\tnewValue\\n\\t) -> (boolean)\\n)\\n```\\n\\nConstructs a new Hold Object, which is used to store singular values. \\n\\n:::caution\\nPassing a nil for `initialValue` is considered unsafe and can cause unintended behavior.\\n:::","source":{"line":22,"path":"src/Hold.luau"}}')}}]);