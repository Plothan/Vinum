"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5762],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},30885:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:3},i="Recording State",l={unversionedId:"Intermediate/Recording State",id:"Intermediate/Recording State",title:"Recording State",description:'Sometimes, we need to store "versions" of certian state objects for stuff like undo/redo changes for states- Vinum allows you to do this using Records.',source:"@site/docs/Intermediate/Recording State.md",sourceDirName:"Intermediate",slug:"/Intermediate/Recording State",permalink:"/Vinum/docs/Intermediate/Recording State",draft:!1,editUrl:"https://github.com/Plothan/Vinum/edit/master/docs/Intermediate/Recording State.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Mirroring State",permalink:"/Vinum/docs/Intermediate/Mirroring State"},next:{title:"Reflecting State",permalink:"/Vinum/docs/Intermediate/Reflecting State"}},c={},s=[{value:"Usage",id:"usage",level:2},{value:"Why Record States",id:"why-record-states",level:2}],d={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"recording-state"},"Recording State"),(0,a.kt)("p",null,'Sometimes, we need to store "versions" of certian state objects for stuff like undo/redo changes for states- Vinum allows you to do this using ',(0,a.kt)("inlineCode",{parentName:"p"},"Records"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local holder = Hold(100, Vinum.AlwaysTrue)\nlocal recorder = Record(holder, true)\n\nprint(recorder:get()) -- 100\nrecorder:desync()\nholder:set(40)\nprint(recorder:get()) -- 100 since the recorder object is desynced\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To use Record, we first import its constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local Record = Vinum.Record\n")),(0,a.kt)("p",null,"And to create a record, we pass our input state, and a boolean that indicate whether our record object is initally synced or not:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local holder = Hold(100, Vinum.AlwaysTrue)\nlocal recorder = Record(holder, true)\n")),(0,a.kt)("p",null,"And now to read from our recorder, we use its ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"print(recorder:get()) -- 100\n")),(0,a.kt)("p",null,"Additionally, we can desync our recorder, which will stop listening to updates coming from ",(0,a.kt)("inlineCode",{parentName:"p"},"holder"),", using ",(0,a.kt)("inlineCode",{parentName:"p"},"desync"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"recorder:desync()\nholder:set(40)\nprint(recorder:get()) -- 100\n")),(0,a.kt)("p",null,"After that, we can sync our recorder once again:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"recorder:sync()\nprint(recorder:get()) -- 40\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"why-record-states"},"Why Record States"),(0,a.kt)("p",null,"Records are more specialist than other object; their only purpose is to allow you to create 'versions\" of a specific state object very efficiently."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Verions"),' though aren\'t really tied to any "paradigm", in fact, it can also help you create "frozen" versions of another state objects- so maybe you want to implement a delay in how a certain process receives your state, something like this:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local Value = Hold(1, AlwaysTrue)\nlocal RecordedValue = Record(Value, false)\nObserve(RecordedValue, AlwaysTrue):onChange(function(newValue)\n    print(newValue)\nend)\n\ntask.spawn(function()\n    while true do\n        RecordedValue:sync()\n        RecordedValue:desync()\n        task.wait(1)\n    end\nend)\n\nValue:set(2)\nValue:set(3)\nValue:set(4) -- This will print last\n")),(0,a.kt)("p",null,"This example is pretty simple, and its behavior can be simplified down to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'We initialize an observer- we treat this as the "consumer" point.'),(0,a.kt)("li",{parentName:"ol"},"We spawn a new task, and then create a loop that runs every second ",(0,a.kt)("em",{parentName:"li"},"(which represents a frame)"),"- where we sync and desync the RecordedValue."),(0,a.kt)("li",{parentName:"ol"},"Finallly, we set ",(0,a.kt)("inlineCode",{parentName:"li"},"Value")," to another value for three times- which if you tried running this code, you will notice that ",(0,a.kt)("inlineCode",{parentName:"li"},"4")," is printed.")))}u.isMDXComponent=!0}}]);