"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5041],{23745:e=>{e.exports=JSON.parse('{"functions":[{"name":"get","desc":"Returns the current value from the cache\\n\\n```lua\\nlocal wrapState1, wrapState2 = Wrap(AnySignal, 2, 100, 200)\\n\\nprint(wrapState1:get(), wrapState2:get()) -- 100, 200\\n```","params":[],"returns":[{"desc":"The cached value","lua_type":"any"}],"function_type":"method","source":{"line":35,"path":"src/Wrap.luau"}},{"name":"disconnect","desc":"Disconncts the connection that Wrap uses to automatically update your wrapped object.\\n\\n```lua\\nlocal wrapState1, wrapState2 = Wrap(AnySignal, 2, 100, 200)\\n\\nwrapState1:disconnect()\\nwraoState2:disconnect()\\n```","params":[],"returns":[],"function_type":"method","source":{"line":52,"path":"src/Wrap.luau"}}],"properties":[],"types":[],"name":"Wrap","desc":"```lua\\nfunction Wrap(\\n\\tSignal: RBXScriptSignal | {\\n\\t\\tConnect: (fn: (...any) -> ()) -> (any),\\n\\t}, -- The signal that will be used to derive objects from\\n\\tnumOfArguments: number, -- The number of arguments that Wrap will detect\\n\\t...: any -- The default values for the objects that will be created by Wrap.\\n)\\n```\\n\\nConstructs a Wrap object that wraps a Signal. The number of arguments is equal to the number of objects that will be created\\nthat captures a specific argument in the event. The `...` is for setting initial values- the order of the values in this one should map the \\nnumOfArguments parameter.","source":{"line":20,"path":"src/Wrap.luau"}}')}}]);